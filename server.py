import logging

from aiogram import Bot, Dispatcher, types, executor

import keyboard
import logic

bot = Bot(token='')
dp = Dispatcher(bot)

logging.basicConfig(level=logging.INFO)


@dp.message_handler(commands='menu')
@dp.message_handler(commands='start')
async def send_welcome(message: types.Message):
    user_id = message.from_user.id
    user_status = logic.check_user_profile(user_id)

    if user_status:
        await message.answer('üì±–î–ª—è –≤–∑–∞–∏–º–æ–¥–µ—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º, –∏—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—é –∫–Ω–æ–ø–æ–∫üëá',
                             reply_markup=keyboard.main_keyboard())

    elif not user_status:
        username = message.from_user.username
        await message.answer(f'üôã‚Äç‚ôÇÔ∏è–ü—Ä–∏–≤–µ—Ç, {username}!\n–¢—ã —Ç—É—Ç –≤–ø–µ—Ä–≤—ã–µ, –ø–æ—ç—Ç–æ–º—É –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.'
                             f' –í–≤–µ–¥–∏ —Ç–æ–∫–µ–Ω —Å–≤–æ–µ–≥–æ –∫–ª–∞—Å—Å–∞. –ï—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –æ–±—Ä–∞—Ç–∏—Å—å –∫ @hymiside.')


@dp.message_handler(lambda message: message.text.startswith('class'))
async def input_class_token(message: types.Message):
    user_id = message.from_user.id
    token = message.text
    username = message.from_user.username

    token_status = logic.check_token(token)

    if token_status:
        logic.add_user_profile(username, token, user_id)
        return await message.answer(
            'ü§ç–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!ü§ç\n\nüì±–î–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º, –∏—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—é –∫–Ω–æ–ø–æ–∫üëá',
            reply_markup=keyboard.main_keyboard())

    elif not token_status:
        return await message.answer('üõë–¢–∞–∫–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –û–±—Ä–∞—Ç–∏—Å—å –∫ @hymiside.üõë')


@dp.callback_query_handler(text='add_homework')
async def add_homework(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    role = logic.check_user_role(user_id)

    if role == ['–†–µ–¥–∞–∫—Ç–æ—Ä']:
        await callback_query.message.answer('üìñ–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –º–µ–Ω—é, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É '
                                            '–ø—Ä–µ–¥–º–µ—Ç—Éüëá', reply_markup=keyboard.homework_keyboard())

    elif role == ['–ß–∏—Ç–∞—Ç–µ–ª—å']:
        await callback_query.message.answer('üôÖ‚Äç‚ôÇÔ∏è–¢–≤–æ–π —É—Ä–æ–≤–µ–Ω—å ‚Äî –ß–∏—Ç–∞—Ç–µ–ª—åüôÖ‚Äç‚ôÇÔ∏è\n–î–æ–±–∞–≤–∏—Ç—å –î–ó –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –†–µ–¥–∞–∫—Ç–æ—Ä!'
                                            ' –ß—Ç–æ–±—ã –ø–æ–≤—ã—Å–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–í–≤–µ—Å—Ç–∏ –∫–æ–¥ –†–µ–¥–∞–∫—Ç–æ—Ä–∞" –∏ '
                                            '–≤–≤–µ–¥–∏ –∫–æ–¥ –†–µ–¥–∞–∫—Ç–æ—Ä–∞. –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –æ–±—Ä–∞—Ç–∏—Å—å –∫ @hymiside.',
                                            reply_markup=keyboard.main_keyboard())

    elif not role:
        await callback_query.message.answer('‚ùó–¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ —É–¥–∞–ª–µ–Ω‚ùó\n –ù–∞–∂–º–∏ /start, —á—Ç–æ–±—ã '
                                            '–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.')


@dp.callback_query_handler(text='russian')
@dp.callback_query_handler(text='literature')
@dp.callback_query_handler(text='algebra')
@dp.callback_query_handler(text='geometry')
@dp.callback_query_handler(text='physics')
@dp.callback_query_handler(text='informatics')
@dp.callback_query_handler(text='chemistry')
@dp.callback_query_handler(text='english')
@dp.callback_query_handler(text='biology')
@dp.callback_query_handler(text='astronomy')
@dp.callback_query_handler(text='obg')
@dp.callback_query_handler(text='history')
@dp.callback_query_handler(text='sport')
async def input_subject(callback_query: types.CallbackQuery):
    global subject

    user_id = callback_query.from_user.id
    class_token = logic.return_token(user_id)

    if not class_token:
        return await callback_query.message.answer('‚ùó–¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ —É–¥–∞–ª–µ–Ω‚ùó\n –ù–∞–∂–º–∏ /start, —á—Ç–æ–±—ã '
                                                   '–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.')

    subjects_dict = {
        'russian': '–†—É—Å—Å–∫–∏–π —è–∑—ã–∫',
        'literature': '–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞',
        'algebra': '–ê–ª–≥–µ–±—Ä–∞',
        'chemistry': '–•–∏–º–∏—è',
        'english': '–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫',
        'geometry': '–ì–µ–æ–º–µ—Ç—Ä–∏—è',
        'informatics': '–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞',
        'physics': '–§–∏–∑–∏–∫–∞',
        'sport': '–§–∏–∑–∫—É–ª—å—Ç—É—Ä–∞',
        'biology': '–ë–∏–æ–ª–æ–≥–∏—è',
        'astronomy': '–ê—Å—Ç—Ä–æ–Ω–æ–º–∏—è',
        'history': '–ò—Å—Ç–æ—Ä–∏—è',
        'obg': '–û–ë–ñ'
    }
    subject_key = callback_query.data
    subject = subjects_dict[subject_key]
    await callback_query.message.answer('üíÅ‚Äç‚ôÇÔ∏è–¢–µ–ø–µ—Ä—å –≤–≤–æ–¥–∏ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ, –Ω–æ –≤ –Ω–∞—á–∞–ª–µ –¥–æ–±–∞–≤—å *')


@dp.message_handler(lambda message: message.text.startswith('*'))
async def input_homework(message: types.Message):
    user_id = message.from_user.id
    homework = message.text.strip('*').strip()

    token = logic.return_token(user_id)
    logic.add_homework(subject, homework, user_id, token)
    return await message.answer('‚úÖ–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ', reply_markup=keyboard.main_keyboard())


@dp.callback_query_handler(text='view_homework')
async def view_homework(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    token = logic.return_token(user_id)

    if not token:
        return await callback_query.message.answer('‚ùó–¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ —É–¥–∞–ª–µ–Ω‚ùó\n –ù–∞–∂–º–∏ /start, —á—Ç–æ–±—ã '
                                                   '–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.')

    all_homework = logic.view_homework(*token)
    if not all_homework:
        return await callback_query.message.answer('üìñ–î–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –Ω–µ—Çüìñ\n–ö–∞–π—Ñ—É–πü§ç',
                                                   reply_markup=keyboard.main_keyboard())

    list_homework = [
        f'–ü—Ä–µ–¥–º–µ—Ç: {homework.subject}\n–ó–∞–¥–∞–Ω–∏–µ: {homework.homework}\n–°–æ–∑–¥–∞–Ω–æ: {homework.created_at} - —á—Ç–æ–±—ã ' \
        f'—É–¥–∞–ª–∏—Ç—å, –Ω–∞–∂–º–∏ /delete{homework.id}' for homework in all_homework]

    return await callback_query.message.answer('üìñ–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µüìñ\n\n' + "\n\n".join(list_homework),
                                               reply_markup=keyboard.main_keyboard())


@dp.message_handler(lambda message: message.text.startswith('/del'))
async def delete_homework(message: types.Message):
    user_id = message.from_user.id
    role = logic.check_user_role(user_id)

    if role == ['–†–µ–¥–∞–∫—Ç–æ—Ä']:
        row_id = int(message.text[7:])
        logic.delete_homework(row_id)
        return await message.answer('‚úÖ–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ', reply_markup=keyboard.main_keyboard())

    elif role == ['–ß–∏—Ç–∞—Ç–µ–ª—å']:
        return await message.answer('üôÖ‚Äç‚ôÇÔ∏è–¢–≤–æ–π —É—Ä–æ–≤–µ–Ω—å ‚Äî –ß–∏—Ç–∞—Ç–µ–ª—åüôÖ‚Äç‚ôÇÔ∏è\n–£–¥–∞–ª–∏—Ç—å –î–ó –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –†–µ–¥–∞–∫—Ç–æ—Ä!'
                                    ' –ß—Ç–æ–±—ã –ø–æ–≤—ã—Å–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–í–≤–µ—Å—Ç–∏ –∫–æ–¥ –†–µ–¥–∞–∫—Ç–æ—Ä–∞" –∏ '
                                    '–≤–≤–µ–¥–∏ –∫–æ–¥ –†–µ–¥–∞–∫—Ç–æ—Ä–∞. –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –æ–±—Ä–∞—Ç–∏—Å—å –∫ @hymiside.',
                                    reply_markup=keyboard.main_keyboard())

    elif not role:
        return await message.answer('‚ùó–¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ —É–¥–∞–ª–µ–Ω‚ùó\n –ù–∞–∂–º–∏ /start, —á—Ç–æ–±—ã '
                                    '–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.')


@dp.callback_query_handler(text='view_subjects')
async def view_subjects(message: types.Message):
    pass


@dp.callback_query_handler(text='view_schedule')
async def view_schedule(message: types.Message):
    pass


@dp.callback_query_handler(text='enter_code')
async def enter_editor_code(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    role = logic.check_user_role(user_id)

    if role == ['–ß–∏—Ç–∞—Ç–µ–ª—å']:
        await callback_query.message.answer('üíÅ‚Äç‚ôÇÔ∏è–¢–µ–ø–µ—Ä—å –≤–≤–æ–¥–∏ –∫–æ–¥ –†–µ–¥–∞–∫—Ç–æ—Ä–∞')

    elif role == ['–†–µ–¥–∞–∫—Ç–æ—Ä']:
        return await callback_query.message.answer('üôÖ‚Äç‚ôÇÔ∏è–¢–≤–æ–π —É—Ä–æ–≤–µ–Ω—å ‚Äî –†–µ–¥–∞–∫—Ç–æ—ÄüôÖ‚Äç‚ôÇÔ∏è\n –î–∞–ª—å—à–µ —Ç–æ–ª—å–∫–æ –ë–û–ì, –Ω–æ —ç—Ç–æ –Ω–µ '
                                                   '–∫–æ –º–Ω–µ)', reply_markup=keyboard.main_keyboard())

    elif not role:
        return await callback_query.message.answer('‚ùó–¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ —É–¥–∞–ª–µ–Ω‚ùó\n –ù–∞–∂–º–∏ /start, —á—Ç–æ–±—ã '
                                                   '–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.')


@dp.message_handler(lambda message: message.text.startswith('editor'))
async def input_editor_token(message: types.Message):
    user_id = message.from_user.id
    editor_token = message.text

    token = logic.return_token(user_id)
    id = logic.return_id(user_id)
    status_editor_token = logic.check_editor_token(*token, editor_token)

    if status_editor_token:
        logic.update_user_role(*id)
        return await message.answer('‚úÖ–¢–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –ø–æ–≤—ã—à–µ–Ω –¥–æ –†–µ–¥–∞–∫—Ç–æ—Ä–∞‚úÖ\n\n'
                                    '–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –¥–æ–±–∞–≤–ª—è—Ç—å –∏ —É–¥–∞–ª—è—Ç—å –î–ó, –∞ —Ç–∞–∫–∂–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ '
                                    '–∏–≤–µ–Ω—Ç—ã', reply_markup=keyboard.main_keyboard())

    elif not status_editor_token:
        return await message.answer('üõë–¢–∞–∫–æ–≥–æ –∫–æ–¥–∞ –†–µ–¥–∞–∫—Ç–æ—Ä–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –û–±—Ä–∞—Ç–∏—Å—å –∫ @hymiside.üõë')


@dp.callback_query_handler(text='pay')
async def donate(callback_query: types.CallbackQuery):
    button = types.InlineKeyboardButton(text="–ü–æ–º–æ—á—å —Å –¥–µ–Ω—å–≥–∞–º–∏", url='https://yoomoney.ru/to/4100117051898846')
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(button)

    return await callback_query.message.answer('–°–µ–π—á–∞—Å —è —Å–æ–¥–µ—Ä–∂—É –±–æ—Ç–∞ –Ω–∞ —Å–≤–æ–∏ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è, –Ω–æ —Ç—ã –º–æ–∂–µ—à—å –ø–æ–º–æ—á—å ‚Äî '
                                               '–∑–∞–¥–æ–Ω–∞—Ç–∏—Ç—å –Ω–∞ –æ–ø–ª–∞—Ç—É —Å–µ—Ä–≤–µ—Ä–∞, –º–∞—Ä–∫–µ—Ç–∏–Ω–≥, —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ '
                                               '–¥–∞–ª—å–Ω–µ–π—à–µ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ –±–æ—Ç–∞!\n\n'
                                               'ü§ç–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–ª—å–∑—É–µ—à—å—Å—è –î–æ–º–∞—à–∫–∞.–ë–æ—Çü§ç', reply_markup=keyboard)


@dp.message_handler()
async def other(message: types.Message):
    return await message.answer('ü§∑–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—éü§∑\nEc–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã –æ–±—Ä–∞—Ç–∏—Å—å –∫ @hymiside.')


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
